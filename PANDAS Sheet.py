# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jkUPZzNa9LMpQ945yItQAzGEi89DkHtC
"""

# 📌 PANDAS CHEAT SHEET - DATA ANALYST RNCP NIVEAU 7 📊

---

# 📥 IMPORTATION ET CRÉATION DE DATAFRAMES

```python
import pandas as pd
import numpy as np

# Créer un DataFrame à partir d'un dictionnaire
df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})

# Créer un DataFrame avec des valeurs aléatoires
df_random = pd.DataFrame(np.random.randn(5, 3), columns=['X', 'Y', 'Z'])

# Charger un fichier CSV
df = pd.read_csv('data.csv')

# Charger un fichier Excel
df = pd.read_excel('data.xlsx')

# Charger un fichier JSON
df = pd.read_json('data.json')
```

---

# 🔍 EXPLORATION DES DONNÉES

```python
# Afficher les premières et dernières lignes
df.head()
df.tail()

# Obtenir la taille et les informations générales
df.shape
df.info()

# Statistiques descriptives
df.describe()

# Types de données et valeurs uniques
df.dtypes
df.nunique()

# Identifier les valeurs manquantes
df.isnull().sum()
```

---

# 🔄 MANIPULATION DES DONNÉES

```python
# Sélectionner des colonnes et lignes
df['A']
df[['A', 'B']]
df.loc[0]
df.iloc[0]

# Filtrer les données
df[df['A'] > 2]

# Ajouter une colonne
df['C'] = df['A'] + df['B']

# Modifier une valeur spécifique
df.at[0, 'A'] = 99

# Appliquer une fonction
df['A'] = df['A'].apply(lambda x: x * 2)
```

---

# 📊 STATISTIQUES DESCRIPTIVES

```python
# Calculs statistiques basiques
df.mean()
df.median()
df.min(), df.max()
df.sum()
df.std()

# Comptage des valeurs uniques
df['A'].value_counts()
```

---

# 🔄 NETTOYAGE DES DONNÉES

```python
# Gérer les valeurs manquantes
df.dropna()
df.fillna(value=0)

# Supprimer les doublons
df.drop_duplicates()

# Remplacer des valeurs
df.replace({'ancien_valeur': 'nouvelle_valeur'})

# Renommer les colonnes
df.rename(columns={'A': 'Nouvelle_A', 'B': 'Nouvelle_B'})
```

---

# 🔄 FUSION ET JOINTURES

```python
df1 = pd.DataFrame({'ID': [1, 2, 3], 'Valeur': ['A', 'B', 'C']})
df2 = pd.DataFrame({'ID': [2, 3, 4], 'Score': [50, 60, 70]})

# Jointures et concaténations
merged_df = pd.merge(df1, df2, on='ID', how='inner')
merged_df_outer = pd.merge(df1, df2, on='ID', how='outer')
df_concat = pd.concat([df1, df2], ignore_index=True)
```

---

# 🔄 GROUPEMENT ET AGRÉGATION

```python
# Agrégation des données
df.groupby('A').mean()
df.groupby('A').agg(['mean', 'sum'])
df.groupby('A').size()
```

---

# 🔀 RESTRUCTURATION DES DONNÉES

```python
# Transformer les colonnes en lignes et vice versa
pd.melt(df, id_vars=['A'], value_vars=['B', 'C'])
df.pivot(index='A', columns='B', values='C')
df.T
```

---

# 🏎️ OPTIMISATION DES DONNÉES

```python
# Conversion et optimisation
df['A'] = df['A'].astype(float)
df['B'] = pd.to_numeric(df['B'], downcast='integer')
```

---

# 📊 VISUALISATION RAPIDE DES DONNÉES

```python
import matplotlib.pyplot as plt
import seaborn as sns

# Histogramme
df['A'].hist()
plt.show()

# Boxplot
sns.boxplot(x=df['A'])
plt.show()

# Corrélation entre les colonnes
df.corr()
```

---

# 📤 EXPORTATION DES DONNÉES

```python
# Sauvegarde des données
df.to_csv('output.csv', index=False)
df.to_excel('output.xlsx', index=False)
df.to_json('output.json')
```

---

💡 **Astuce :** Pour utiliser cette fiche dans **Google Colab**, il suffit de copier-coller le code dans une cellule de notebook et d'exécuter les commandes. 🚀