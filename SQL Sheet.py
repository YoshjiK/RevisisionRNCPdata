# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q2z5sB3ygjYV9b-J3DukxGuDRmJS25_I
"""

-- üìå SQL CHEAT SHEET - DATA ANALYST RNCP NIVEAU 7 üìä

---

# üì• IMPORTATION ET STRUCTURATION DES DONN√âES

```sql
-- Cr√©er une base de donn√©es
CREATE DATABASE my_database;

-- Utiliser une base de donn√©es
USE my_database;

-- Cr√©er une table
CREATE TABLE clients (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nom VARCHAR(50),
    age INT,
    ville VARCHAR(50)
);

-- Ins√©rer des donn√©es
INSERT INTO clients (nom, age, ville)
VALUES ('Alice', 30, 'Paris'), ('Bob', 25, 'Lyon');

-- Voir les donn√©es
SELECT * FROM clients;
```

---

# üîç S√âLECTION ET FILTRAGE DES DONN√âES

```sql
-- S√©lectionner toutes les colonnes
SELECT * FROM clients;

-- S√©lectionner des colonnes sp√©cifiques
SELECT nom, age FROM clients;

-- Filtrer avec une condition
SELECT * FROM clients WHERE age > 25;

-- Utiliser plusieurs conditions
SELECT * FROM clients WHERE age > 25 AND ville = 'Paris';

-- Trier les r√©sultats
SELECT * FROM clients ORDER BY age DESC;
```

---

# üîÑ JOINTURES SQL EXPLIQU√âES

```sql
-- Cr√©er une autre table
CREATE TABLE commandes (
    id INT PRIMARY KEY AUTO_INCREMENT,
    client_id INT,
    montant DECIMAL(10,2),
    date_commande DATE,
    FOREIGN KEY (client_id) REFERENCES clients(id)
);

-- Ins√©rer des commandes
INSERT INTO commandes (client_id, montant, date_commande)
VALUES (1, 100.50, '2024-01-10'), (2, 200.75, '2024-01-15');

-- INNER JOIN : Retourne seulement les correspondances
SELECT clients.nom, commandes.montant
FROM clients
INNER JOIN commandes ON clients.id = commandes.client_id;

-- LEFT JOIN : Retourne tous les clients m√™me s'ils n'ont pas de commandes
SELECT clients.nom, commandes.montant
FROM clients
LEFT JOIN commandes ON clients.id = commandes.client_id;

-- RIGHT JOIN : Retourne toutes les commandes m√™me si le client n'existe pas
SELECT clients.nom, commandes.montant
FROM clients
RIGHT JOIN commandes ON clients.id = commandes.client_id;

-- FULL OUTER JOIN : Retourne tous les clients et toutes les commandes
SELECT clients.nom, commandes.montant
FROM clients
FULL OUTER JOIN commandes ON clients.id = commandes.client_id;
```

---

# üìä AGR√âGATION ET GROUP BY

```sql
-- Compter le nombre de clients
SELECT COUNT(*) FROM clients;

-- Obtenir l'√¢ge moyen des clients
SELECT AVG(age) FROM clients;

-- Regrouper et compter
SELECT ville, COUNT(*) FROM clients GROUP BY ville;

-- Somme des montants des commandes par client
SELECT clients.nom, SUM(commandes.montant)
FROM clients
INNER JOIN commandes ON clients.id = commandes.client_id
GROUP BY clients.nom;
```

---

# üèéÔ∏è OPTIMISATION ET INDEXATION

```sql
-- Ajouter un index pour acc√©l√©rer les recherches
CREATE INDEX idx_nom ON clients(nom);

-- Voir les indexes existants
SHOW INDEX FROM clients;
```

---

# üì§ EXPORTATION ET IMPORTATION DES DONN√âES

```sql
-- Exporter une table en CSV
SELECT * FROM clients INTO OUTFILE '/tmp/clients.csv'
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n';

-- Importer un fichier CSV dans une table
LOAD DATA INFILE '/tmp/clients.csv'
INTO TABLE clients
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n';
```

---

üí° **Astuce :** Cette fiche couvre les **op√©rations essentielles en SQL**, avec un focus sur les **jointures, agr√©gations et optimisations**, indispensables pour un **Data Analyst RNCP Niveau 7**. üöÄ